# -*- coding: utf-8 -*-
"""MATH4143A1-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18RkiNwn75mpyuCLGNsbZOkHEZZflOkgf

Nitesh Bansal

219106814

Assignment 1- MATH 4143
"""

#Black scholes model imported from the lecture notes
import numpy as np
from numpy import sqrt, log, exp
from scipy.special import ndtr

def BS_call(S,T,r,sigma,K):
    d1=(log(S/K)+(r+0.5*sigma**2)*T)/(sigma*sqrt(T))
    d2=d1-sigma*sqrt(T)
    C=ndtr(d1)*S-ndtr(d2)*K*exp(-r*T)
    return C

#I am using bisection method to find implied velocity

def implied_volatility(S0, K, r, T, z, tol=1e-6, max_iter=100):

    #setting the bounds
    sigma_low = 1e-6
    sigma_high = 3.0

    #for loop to iterate over to find iv
    for _ in range(max_iter):
        sigma_mid = (sigma_low + sigma_high) / 2
        price_mid = BS_call(S0, T, r, sigma_mid, K)

        #checking if the price is close enough to the market price
        if abs(price_mid - z) < tol:
            return sigma_mid

        #adjusting bounds based on price comparison
        if price_mid < z:
            sigma_low = sigma_mid
        else:
            sigma_high = sigma_mid

    #if not converged, return midpoint as best estimate
    return (sigma_low + sigma_high) / 2

#constants
S0 = 100
r = 0.05
T = 0.5

#params
parameters = [
    (90, 14),
    (100, 6),
    (110, 5)
]

#interating over params and finding ivs
for K, z in parameters:
    iv = implied_volatility(S0, K, r, T, z)
    print(f"Implied Volatility for K={K}, z={z}: {iv}")

